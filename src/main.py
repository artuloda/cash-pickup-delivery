import time
import numpy as np
from algorithm import Instance, Solution, Context
# from algorithm import Problem, Instance, Solution, PreValidation, PostValidation
# from model import Algorithm

def print_ASCII_logo():
    logo_str =  """
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@((&@@@@((@@@@@@@@(@@@@@@@@%%@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@((&@((((((((@@(((((((@@%%%%%%%%@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@((&@((((((((@@(((((((@@%%%%%%%%@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@((&@@@@((#@@@@@@(((@@@@@@&%%&@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@((((@@@@@@@@@@@@@@@@(((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@((@@@@@@@@@@@@@@@@@(((@@@@@@@@@@@@@@@@@@@@@@@@@@@((&@@#(((((@@@((@@@(((((@@@@@%%%%%@@@@%%%%%@@
    @@@@@@@((((((@((((@@@@@@@@%(((((%@@@@@@@@@@@@#((((((@@@@@((((@@@@@@@@%(((((%@(((@@@@@@@@@((((((@@@@@@@@@@@@((&@((((((((@@((@@((((((((@%%%%%%%%@@%%%%%%%@
    @@@(((((((((((((((@@@@@(((((((((((((@@@@@(((((((((((((@@@((((@@@@@((((((((((((((@@@@@(((((((((((((@@@@@@@@@((&@@((((((@@@((@@(((((((@@@%%%%%%&@@%%%%%%%@
    @@((((@@@@@@@@((((@@@((((@@@@@@@@((((@@@((((@@@@@@@@@@@@@((((@@@((((@@@@@@@@@(((@@@@(((%@@@@@@@@(((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @((((@@@@@@@@@((((@@@((((((((((((((((@@((((@@@@@@@@@@@@@@((((@@@((((@@@@@@@@@(((@@@((((((((((((((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@(((@@@@@@@@@((((@@@((((@@@@@@@@@@@@@@((((@@@@@@@@@@@@@@((((@@@((((@@@@@@@@@(((@@@%(((@@@@@@@@@@@@@@@@@@@@((&@@((((((@@@(((((((@@@%%%%%%@@@@@@@@@@@@@@@
    @@#(((((@@@@@@((((@@@@(((((@@@@@@#((@@@@#(((((@@@@@(((@@@((((@@@@(((((@@@@@@@(((@@@@((((((@@@@@@((@@@@@@@@@((&@((((((((@@(((((((@@%%%%%%%%@@@@@@@@@@@@@@
    @@@@@(((((((((((((@@@@@@((((((((((((@@@@@@@(((((((((((@@@((((@@@@@@(((((((((((((@@@@@@@((((((((((((@@@@@@@@((&@@@(((((@@@@(((((@@@@%%%%%@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                        """ 
    print(logo_str)


def execute():
    start_time = time.time()

    # Context
    context = Context()

    # Instance
    instance = Instance(context)
    print(instance)

    solution = Solution(context, instance)
    solution.solve()
    routes, total_distance, storage_cost, total_cost, unserved = solution.routes, solution.total_distance, solution.storage_cost, solution.total_cost, solution.unserved

    print_solution(routes, total_distance, storage_cost, total_cost, unserved)
    print(f"Time taken: {time.time() - start_time} s.")


def print_solution(routes: list, total_distance: int, storage_cost: int, total_cost: int, unserved: set):
    """
    Print the solution

    Args:
        routes (list): Routes per vehicle
        total_distance (int): Total distance traveled
        storage_cost (int): Depot storage cost
        total_cost (int): Total cost
        unserved (set): Unserved services
    """
    print("Routes per vehicle:")
    for v, route in enumerate(routes):
        print(f"  Vehicle {v + 1}: Depot -> {' -> '.join(map(str, route))} -> Depot")

    print(f"\nUnserved services: {unserved}")
    print(f"Total distance traveled: {total_distance}")
    print(f"Depot storage cost: {storage_cost}")
    print(f"Total cost: {total_cost}")
    

if __name__ == '__main__':
    print_ASCII_logo()
    execute()
   